#!/sbinlab2/software/python-enthought-dis/epd-7.3-2-rh5-x86_64/bin/python2.7

import sys, os, re, math
from scipy.stats import distributions
from operator import itemgetter, attrgetter
from subprocess import call

if len(sys.argv) > 5:
    filename = sys.argv[1]
    filebase, fileext = os.path.splitext(filename)
    distlimit= float(sys.argv[2])
    x=float(sys.argv[3])
    R2_app_lim=float(sys.argv[4])
    filenamess = sys.argv[5]
    filebasess, filessext = os.path.splitext(filenamess)
#    WSSR1=int(sys.argv[2]); NDF1=int(sys.argv[3]); WSSR2=int(sys.argv[4]); NDF2=int(sys.argv[5])
#    #print WSSR1, NDF1, WSSR2, NDF2
#    #print filebase, fileext
else:
#    print "Please execute with arguments: table_simple_complex.fit WSSR1 NDF1 WSSR2 NDF2"
#    print "where:  WSSR1 NDF1 WSSR2 NDF2: gives the column number in file, ex: 7 5 19 17"
    print "Please execute with arguments: table_simple_complex.fit 0.95 1 50 peaks_20121005.shift.sort"
    sys.exit()

# Counting the column number, later subtracting 1 for python column way.
WSSR1=7; NDF1=5; WSSR2=19; NDF2=17

datass=open(filenamess)
linesss=datass.readlines()
datassarr = []
for i in range(1,len(linesss)):
    line=linesss[i]
    datassarr.append(line.split())

data=open(filename)
lines=data.readlines()
outdata=open(filebase+".stat","w")
outdata.write(lines[0].rstrip()+"%10s %10s %10s %6s %6s %2s %6s %6s\n"%("Fval","Fdist","Pval","resi","resip","resn","R2_app",linesss[0].split()[-1]))
textable=open(filebase+".table.tex","w")
texarray=[]
for i in range(1,len(lines)):
    line=lines[i]
    col = line.split()
    filenr = int(col[8])
    rescode = col[9]
    R20b = round(float(col[10]),3)
    R20b_err = round(float(col[11]),3)
    kEXb = round(float(col[12]),3)
    kEXb_err = round(float(col[13]),)
    PHI = round(float(col[14]),3)
    PHI_err = round(float(col[15]),3)
    FIT_NDF = int(col[16])
    FIT_WSSR = round(float(col[18]),3)
    R2_app=(PHI/kEXb)*(1-2*math.tanh(kEXb/4/x)/kEXb*x*2)
    P2mP1 = int(col[NDF1-1])-int(col[NDF2-1])
    NmP2 = int(col[NDF2-1])
    WSSR1val = float(col[WSSR1-1])
    WSSR2val = float(col[WSSR2-1])
    WSSR1mWSSR2 = WSSR1val-WSSR2val
    Fval=(WSSR1mWSSR2/P2mP1)/(WSSR2val/NmP2)
    Fdist= distributions.f.ppf(distlimit, P2mP1, NmP2)
    if Fval > Fdist and kEXb > 0 and R2_app < R2_app_lim and PHI > 0:
        Pval= (1-distributions.f.cdf(Fval, P2mP1, NmP2))
        if rescode.split("-")[-1] == "?":
            resi="NIL"
            resn="-"
            resip="NIL"
            atomcount = "-"
        else:
            non_decimal = re.compile(r'[^0-9]')
            resi=int(non_decimal.sub('',rescode.split("-")[0]))
            resn=rescode.split("-")[0][0]
            atomcountresi = int(datassarr[resi][0])
            atomcountresn = datassarr[resi][1]
            if resi == atomcountresi and resn == atomcountresn: atomcount = datassarr[resi][2]
            if resi > 0 and resi <= 35:
                resip = resi+0
            elif resi > 35 and resi <= 54:
                resip = resi+1
            elif resi > 54 and resi <= 155:
                resip = resi+2
            elif resi > 155 and resi <= 158:
                resip = resi+4
            elif resi > 158 and resi <= 269:
                resip = resi+6
        Fval=round(Fval,3); Fdist=round(Fdist,3); Pval=round(Pval,3); R2_app=round(R2_app,3)
        outdata.write(line.rstrip()+"%10s %10s %10s %6s %6s %2s %6s %6s \n"%(Fval,Fdist,Pval,resi,resip,resn,R2_app,atomcount))
        texarray.append((filenr,resi,resip,resn,Fval,Fdist,Pval,R20b,R20b_err,kEXb,kEXb_err,PHI,PHI_err,R2_app,atomcount))

texarray=sorted(texarray, key=itemgetter(4), reverse=True)        
        
for line in texarray:
    textable.write("%3s & %1s/%1s & %1s & %6s & %5s & %6s & %5s & %6s & %6s & %6s & %9s & %10s & %6s & %6s \\\\\n"%(line[:]))

texreport=open(filebase+".report.tex","w")
texreport.write("\\documentclass[10pt,a4paper]{article}"+"\n")
texreport.write("\\usepackage[english]{babel}"+"\n")
texreport.write("\\usepackage[margin=0.5in]{geometry}"+"\n")
texreport.write("\\usepackage{caption}"+"\n")
texreport.write("\\usepackage{graphicx}"+"\n")
texreport.write("\\begin{document}"+"\n")
texreport.write("\\begin{table}"+"\n")
texreport.write("\\caption{Statistical table of residues where complex model exceeds F-test: %s\\\\"%distlimit+"\n")
texreport.write("R2,app calculated at x=%s, and R2,app$<$%s}"%(x,R2_app_lim)+"\n")
texreport.write("\\begin{tiny}"+"\n")
texreport.write("\\begin{tabular}{|l|rl|l|l|l|l|l|l|l|l|l|l|l|}"+"\n")
texreport.write("\\hline"+"\n")
texreport.write("\# & resi/ & aa & F & Fdist:pdf  & Pval:cdf     & R20b & R20b & kEXb & kEXb & PHI & PHI & R2app & %s\\\\"%linesss[0].split()[-1]+"\n")
texreport.write("   & resip &    &   & (%s,%s,%s) & 1-cdf(F,%s,%s)&     & err  &      & err  &     & err &       & \\\\"%(distlimit,P2mP1,NmP2,P2mP1,NmP2)+"\n")
texreport.write("\\hline"+"\n")
texreport.write("\\input{%s.table.tex}"%filebase+"\n")
texreport.write("\\hline"+"\n")
texreport.write("\\end{tabular}"+"\n")
texreport.write("\\end{tiny}"+"\n")
texreport.write("\\end{table}"+"\n")
texreport.write("\\quad"+"\n")
texreport.write(""+"\n")
texreport.write("\\newpage"+"\n")
texreport.write("\\section*{R2 plottet for residues where complex model exceeds F-test: %s}"%distlimit+"\n")
for line in texarray:
    texreport.write("\\includegraphics[width=1\\textwidth]{%s.png}\n"%(line[0]))
texreport.write("\\end{document}")

textable.close(); texreport.close()
call("pdflatex %s.report.tex 1> /dev/null"%filebase, shell=True)

###
pymolpml=open(filebase+".pml","w")
pymolpml.write(r"reinitialize"+"\n")
pymolpml.write("os.chdir('%s')"%os.getcwd()+"\n")
pymolpml.write(r"fetch 1NDQ, async=0, type=pdb1"+"\n")
pymolpml.write(r"show_as cartoon, 1NDQ"+"\n")
pymolpml.write(r"alter all, b=0.0"+"\n")
pymolpml.write(r"cmd.group('stat')"+"\n")
pymolpml.write(r"data=open('%s.table.tex')"%filebase+"\n")
pymolpml.write(r"lines=data.readlines()"+"\n")
pymolpml.write(r""+"\n")
pymolpml.write(r"python"+"\n")
pymolpml.write(r"minb=0"+"\n")
pymolpml.write(r"maxb=0"+"\n")
pymolpml.write(r"gnyf='"+"%s'"%'"'+"\n")
pymolpml.write(r"for i in range(0,len(lines)):"+"\n")
pymolpml.write(r"    line=lines[i]"+"\n")
pymolpml.write(r"    col = line.split()"+"\n")
pymolpml.write(r"    resi,resip = col[2].split('/')"+"\n")
pymolpml.write(r"    resntable = col[4]"+"\n")
pymolpml.write(r"    Fval = float(col[6])"+"\n")
pymolpml.write(r"    R2app = float(col[24])"+"\n")
pymolpml.write(r"    atomcount = col[26]"+"\n")
pymolpml.write(r"    #print resip, resntable, resi"+"\n")
pymolpml.write(r"    selname='%s%s_%s'%(resntable,resip,resi)"+"\n")
pymolpml.write(r"    cmd.select(selname,'resi %s'%resip)"+"\n")
pymolpml.write(r"    string = '%s%s %1.1f %s'%(resntable,resip,R2app,atomcount)"+"\n")
pymolpml.write(r"    cmd.label('%s and n. CA'%selname, gnyf+string+gnyf)"+"\n")
pymolpml.write(r"    cmd.group('stat',selname)"+"\n")
pymolpml.write(r"    #if Fval <= minb: minb=Fval"+"\n")
pymolpml.write(r"    #if Fval >= maxb: maxb=Fval "+"\n")
pymolpml.write(r"    if R2app >= maxb: maxb=R2app "+"\n")
pymolpml.write(r"    #cmd.alter('resi %s'%resip,'b=%s'%Fval)"+"\n")
pymolpml.write(r"    cmd.alter('resi %s'%resip,'b=%s'%R2app)"+"\n")
pymolpml.write(r"cmd.show('sticks','stat')"+"\n")
pymolpml.write(r"cmd.spectrum('b','blue_white_red','all and symbol C',minimum=minb,maximum=maxb)"+"\n")
pymolpml.write(r"cmd.ramp_new('rampb', '1NDQ', [minb,0,maxb], ['blue','white','red'])"+"\n")
pymolpml.write(r"python end"+"\n")
pymolpml.write(r""+"\n")
pymolpml.write(r"set label_color, black"+"\n")
pymolpml.write(r"set label_position, (2,1,1)"+"\n")
pymolpml.write(r""+"\n")
pymolpml.write(r"bg_color white"+"\n")
pymolpml.write(r"extract CA, symbol CA"+"\n")
pymolpml.write(r"show spheres, CA"+"\n")
pymolpml.write(r"extract HOH, resn HOH"+"\n")
pymolpml.write(r"show nonbonded, HOH"+"\n")
pymolpml.write(r"disable HOH"+"\n")
pymolpml.write(r"select cat_trid, resi 221+64+32"+"\n")
pymolpml.write(r"select oxy_hole, resi 155"+"\n")
pymolpml.write(r"show nonbonded, HOH"+"\n")
pymolpml.write(r"show nonbonded, HOH"+"\n")
pymolpml.write(r""+"\n")
pymolpml.write(r"fetch 1SBN, async=0, type=pdb1"+"\n")
pymolpml.write(r"show_as cartoon, 1SBN"+"\n")
pymolpml.write(r"super 1SBN, 1NDQ"+"\n")
pymolpml.write(r"extract 1SBN_E, 1SBN and chain E"+"\n")
pymolpml.write(r"extract 1SBN_I, 1SBN and chain I"+"\n")
pymolpml.write(r"delete 1SBN"+"\n")
pymolpml.write(r"disable 1SBN_E "+"\n")
pymolpml.write(r"print '@%s.pml'"%filebase+"\n")

data.close(); outdata.close(); pymolpml.close(); datass.close()
